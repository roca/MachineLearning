/*
ChromaDB API

This is OpenAPI schema for ChromaDB API.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetEmbedding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEmbedding{}

// GetEmbedding struct for GetEmbedding
type GetEmbedding struct {
	Ids           []string               `json:"ids,omitempty"`
	Where         map[string]interface{} `json:"where,omitempty"`
	WhereDocument map[string]interface{} `json:"where_document,omitempty"`
	Sort          *string                `json:"sort,omitempty"`
	Limit         *int32                 `json:"limit,omitempty"`
	Offset        *int32                 `json:"offset,omitempty"`
	Include       []IncludeInner         `json:"include,omitempty"`
}

// NewGetEmbedding instantiates a new GetEmbedding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEmbedding() *GetEmbedding {
	this := GetEmbedding{}
	return &this
}

// NewGetEmbeddingWithDefaults instantiates a new GetEmbedding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEmbeddingWithDefaults() *GetEmbedding {
	this := GetEmbedding{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *GetEmbedding) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEmbedding) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *GetEmbedding) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *GetEmbedding) SetIds(v []string) {
	o.Ids = v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *GetEmbedding) GetWhere() map[string]interface{} {
	if o == nil || IsNil(o.Where) {
		var ret map[string]interface{}
		return ret
	}
	return o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEmbedding) GetWhereOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Where) {
		return map[string]interface{}{}, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *GetEmbedding) HasWhere() bool {
	if o != nil && !IsNil(o.Where) {
		return true
	}

	return false
}

// SetWhere gets a reference to the given map[string]interface{} and assigns it to the Where field.
func (o *GetEmbedding) SetWhere(v map[string]interface{}) {
	o.Where = v
}

// GetWhereDocument returns the WhereDocument field value if set, zero value otherwise.
func (o *GetEmbedding) GetWhereDocument() map[string]interface{} {
	if o == nil || IsNil(o.WhereDocument) {
		var ret map[string]interface{}
		return ret
	}
	return o.WhereDocument
}

// GetWhereDocumentOk returns a tuple with the WhereDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEmbedding) GetWhereDocumentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.WhereDocument) {
		return map[string]interface{}{}, false
	}
	return o.WhereDocument, true
}

// HasWhereDocument returns a boolean if a field has been set.
func (o *GetEmbedding) HasWhereDocument() bool {
	if o != nil && !IsNil(o.WhereDocument) {
		return true
	}

	return false
}

// SetWhereDocument gets a reference to the given map[string]interface{} and assigns it to the WhereDocument field.
func (o *GetEmbedding) SetWhereDocument(v map[string]interface{}) {
	o.WhereDocument = v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *GetEmbedding) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEmbedding) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *GetEmbedding) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *GetEmbedding) SetSort(v string) {
	o.Sort = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *GetEmbedding) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEmbedding) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *GetEmbedding) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *GetEmbedding) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *GetEmbedding) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEmbedding) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *GetEmbedding) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *GetEmbedding) SetOffset(v int32) {
	o.Offset = &v
}

// GetInclude returns the Include field value if set, zero value otherwise.
func (o *GetEmbedding) GetInclude() []IncludeInner {
	if o == nil || IsNil(o.Include) {
		var ret []IncludeInner
		return ret
	}
	return o.Include
}

// GetIncludeOk returns a tuple with the Include field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEmbedding) GetIncludeOk() ([]IncludeInner, bool) {
	if o == nil || IsNil(o.Include) {
		return nil, false
	}
	return o.Include, true
}

// HasInclude returns a boolean if a field has been set.
func (o *GetEmbedding) HasInclude() bool {
	if o != nil && !IsNil(o.Include) {
		return true
	}

	return false
}

// SetInclude gets a reference to the given []IncludeInner and assigns it to the Include field.
func (o *GetEmbedding) SetInclude(v []IncludeInner) {
	o.Include = v
}

func (o GetEmbedding) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEmbedding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Where) {
		toSerialize["where"] = o.Where
	}
	if !IsNil(o.WhereDocument) {
		toSerialize["where_document"] = o.WhereDocument
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Include) {
		toSerialize["include"] = o.Include
	}
	return toSerialize, nil
}

type NullableGetEmbedding struct {
	value *GetEmbedding
	isSet bool
}

func (v NullableGetEmbedding) Get() *GetEmbedding {
	return v.value
}

func (v *NullableGetEmbedding) Set(val *GetEmbedding) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEmbedding) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEmbedding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEmbedding(val *GetEmbedding) *NullableGetEmbedding {
	return &NullableGetEmbedding{value: val, isSet: true}
}

func (v NullableGetEmbedding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEmbedding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
